name: Update Snapshot Applications Orchestrator

on:
  schedule:
    - cron: "*/20 * * * *"

  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Perform dry run without making changes'
        required: false
        type: boolean
        default: false

env:
  DRY_RUN: ${{ github.event_name == 'workflow_dispatch' && inputs.dry_run || false }}

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  get-applications:
    name: Extract Application List
    runs-on: ubuntu-latest
    outputs:
      applications: ${{ steps.extract-applications.outputs.applications }}
      application_count: ${{ steps.extract-applications.outputs.application_count }}
    steps:
      - name: Checkout Platform Repository
        uses: actions/checkout@v4
        with:
          ref: snapshot
          fetch-depth: 0

      - name: Extract Existing Applications
        id: extract-applications
        env:
            FILE: "platform-descriptor.json"
        run: |
          set -eo pipefail

          if [ ! -f "$FILE" ]; then
            echo "::error::$FILE not found in the snapshot branch"
            exit 1
          fi

          existing_apps=$(jq -c '
            [.applications.required[]?, .applications.optional[]?]
            | map(select(.name | startswith("app-")) 
            | .name)
            | sort 
            | unique
          ' "$FILE")
          
          existing_count=$(jq -r 'length' <<<"$existing_apps")
          if ! [[ "$existing_count" -gt 0 ]]; then
            echo "::error::Could not find any applications in $FILE, or the file is malformed."
            exit 1
          fi
          
          echo "::notice::Descriptor verified. $FILE found with $existing_count existing app(s)"
          jq -r '.[]' <<<"$existing_apps" | sed 's/^/  - /'
          
          echo "applications=$existing_apps" >> "$GITHUB_OUTPUT"
          echo "application_count=$existing_count" >> "$GITHUB_OUTPUT"

  update-applications:
    name: Update ${{ matrix.application }}
    needs: get-applications
    strategy:
      matrix:
        application: ${{ fromJson(needs.get-applications.outputs.applications) }}
      fail-fast: false
      max-parallel: 5
    uses: folio-org/kitfox-github/.github/workflows/app-update.yml@RANCHER-2321-test
    with:
      app_name: folio-org/${{ matrix.application }}
      workflow_run_number: ${{ github.run_number }}
      dry_run: ${{ env.DRY_RUN }}

  collect-results:
    name: Collect Application Results
    needs: [get-applications, update-applications]
    runs-on: ubuntu-latest
    if: always() && needs.update-applications.result != 'skipped' && env.DRY_RUN != true
    outputs:
      failed_apps: ${{ steps.gather-failures.outputs.failed_apps }}
      failed_apps_reason: ${{ steps.gather-failures.outputs.failed_apps_reason }}
      success_count: ${{ steps.gather-failures.outputs.success_count }}
      failure_count: ${{ steps.gather-failures.outputs.failure_count }}
    steps:
      - name: Download All Application Results
        uses: actions/download-artifact@v4
        with:
          pattern: "result-*"
          path: /tmp/all-results
          merge-multiple: true

      - name: Gather Application Results
        id: gather-failures
        run: |
          set -eo pipefail
          
          echo "::notice::Analyzing application results"

          all=$(jq -s '.' /tmp/all-results/*.json)

          success_count=$(jq '[.[] | select(.status=="success")] | length' <<<"$all")
          failure_count=$(jq '[.[] | select(.status!="success")] | length' <<<"$all")
          failed_apps=$(jq -r '[.[] | select(.status!="success") | .application] | join(", ")' <<<"$all")
          failed_apps_reason=$(jq -c '
            map(select(.status!="success"))
            | map({key: .application, value: {reason: (.reason // .error // .message // "unknown")}})
            | from_entries
          ' <<<"$all")
          
          echo "::notice::Results Summary - Success: $success_count, Failures: $failure_count"
          
          echo "failed_apps=$failed_apps" >> "$GITHUB_OUTPUT"
          echo "failed_apps_reason=$failed_apps_reason" >> "$GITHUB_OUTPUT"
          echo "success_count=$success_count" >> "$GITHUB_OUTPUT"
          echo "failure_count=$failure_count" >> "$GITHUB_OUTPUT"      

  slack_notification:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [get-applications, update-applications, collect-results]
    if: always() && env.DRY_RUN != true
    env:
      IS_SUCCESS: ${{ needs.update-applications.result == 'success' && 'true' || 'false' }}
    steps:
      - name: Send SUCCESS Slack Notification
        if: env.IS_SUCCESS == 'true'
        uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.postMessage
          token: ${{ secrets.EUREKA_CI_SLACK_BOT_TOKEN }}
          errors: true
          payload: |
            channel: "${{ vars.GENERAL_SLACK_NOTIF_CHANNEL }}"
            text: "Snapshot Applications Update SUCCESS"            
            blocks:
              - type: section
                text:
                  type: mrkdwn
                  text: "*Snapshot Applications Update SUCCESS <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|#${{ github.run_number }}>*"
            attachments:
              - color: "good"
                fields:
                  - title: "Applications Processed"
                    value: "${{ needs.get-applications.outputs.application_count }}"
                    short: true
                footer: "Eureka CI/CD"

      - name: Send FAILED Slack Notification
        if: env.IS_SUCCESS == 'false'
        uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.postMessage
          token: ${{ secrets.EUREKA_CI_SLACK_BOT_TOKEN }}
          errors: true
          payload: |
            channel: "${{ vars.GENERAL_SLACK_NOTIF_CHANNEL }}"
            text: "Snapshot Applications Update FAILED"
            blocks:
              - type: section
                text:
                  type: mrkdwn
                  text: "*Snapshot Applications Update FAILED <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|#${{ github.run_number }}>*"
              - type: section
                text:
                  type: mrkdwn
                  text: |-
                    *Failed app(s):*
                    ${{ join(fromJson(needs.collect-results.outputs.failed_apps_reason) .* , '\n') }}
            attachments:
              - color: "danger"
                fields:
                  - title: "Applications Successfully Processed"
                    value: "${{ needs.collect-results.outputs.success_count }}"
                    short: true
                  - title: "Applications Failed"
                    value: "${{ needs.collect-results.outputs.failure_count }}"
                    short: true
                footer: "Eureka CI/CD"
