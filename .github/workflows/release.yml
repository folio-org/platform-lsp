# This workflow creates and uploads FOLIO platform release artifacts

name: Package Release Workflow

# Controls when the workflow will run
on:
  release:
    # The release event can be triggered by creating a new release or updating an existing one
    types: [created]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to create artifacts for'
        required: true
        type: string
      far_url:
        description: 'FAR API base URL'
        required: false
        default: 'https://far.ci.folio.org'
        type: string

# Prevent concurrent releases
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  FAR_URL: ${{ github.event.inputs.far_url || 'https://far.ci.folio.org' }}
  CONFIG_PATH: '.github/release-config.yml'
  DESCRIPTOR_PATH: 'platform-descriptor.json'
  SLACK_NOTIFICATION_CHANNEL: '#folio-rancher-debug-notifications'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  validate-and-prepare:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      release_tag: ${{ steps.determine-tag.outputs.release_tag }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: 'actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11'

      - name: Validate configuration
        run: |
          if [[ ! -f ${{ env.CONFIG_PATH }} ]]; then
            echo "::error::Release configuration file not found: ${{ env.CONFIG_PATH }}"
            exit 1
          fi

          echo "✅ Configuration file found"

      - name: Determine release tag
        id: determine-tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RELEASE_TAG="${{ github.event.inputs.release_tag }}"
          else
            RELEASE_TAG="${{ github.event.release.tag_name }}"
          fi

          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "Using release tag: $RELEASE_TAG"

  create-release-artifact:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: validate-and-prepare
    permissions:
      contents: write
      actions: read

    steps:
      - name: Checkout repository
        uses: 'actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11'

      - name: Create release artifact
        id: create-artifact
        uses: ./.github/actions/folio-release-creator
        with:
          release_tag: ${{ needs.validate-and-prepare.outputs.release_tag }}
          config_path: ${{ env.CONFIG_PATH }}
          descriptor_path: ${{ env.DESCRIPTOR_PATH }}
          far_url: ${{ env.FAR_URL }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload to release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "::group::Uploading archive to release"

          archive_path="${{ steps.create-artifact.outputs.archive_path }}"
          archive_name=$(basename "$archive_path")
          checksum_file="${archive_path}.sha256"

          # Create checksum file
          echo "${{ steps.create-artifact.outputs.sha256_checksum }}  $archive_name" > "$checksum_file"

          # Upload archive and checksum to release
          gh release upload "${{ needs.validate-and-prepare.outputs.release_tag }}" \
            "$archive_path" \
            "$checksum_file" \
            --clobber

          echo "✅ Uploaded $archive_name and checksum to release ${{ needs.validate-and-prepare.outputs.release_tag }}"
          echo "Archive size: ${{ steps.create-artifact.outputs.archive_size }} bytes"
          echo "SHA256: ${{ steps.create-artifact.outputs.sha256_checksum }}"
          echo "🎉 Release artifact created successfully!"
          echo "::endgroup::"

      - name: Verify artifact upload
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Archive: ${{ steps.create-artifact.outputs.archive_path }}"
          echo "Size: ${{ steps.create-artifact.outputs.archive_size }} bytes"
          echo "SHA256: ${{ steps.create-artifact.outputs.sha256_checksum }}"

          # Verify the artifact was uploaded to the release
          RELEASE_TAG="${{ needs.validate-and-prepare.outputs.release_tag }}"
          ARCHIVE_NAME=$(basename "${{ steps.create-artifact.outputs.archive_path }}")

          echo "Verifying upload for release: $RELEASE_TAG"
          echo "Expected archive name: $ARCHIVE_NAME"

          # Check if release exists first
          if ! gh release view "$RELEASE_TAG" >/dev/null 2>&1; then
            echo "::error::Release not found: $RELEASE_TAG"
            exit 1
          fi

          # Check if artifact exists in release assets
          ASSETS=$(gh release view "$RELEASE_TAG" --json assets --jq '.assets[].name' 2>/dev/null) || {
            echo "::error::Failed to retrieve release assets for tag: $RELEASE_TAG"
            exit 1
          }

          echo "Available assets in release:"
          echo "$ASSETS" | sed 's/^/  - /'

          if echo "$ASSETS" | grep -q "$ARCHIVE_NAME"; then
            echo "✅ Artifact successfully uploaded to release"
          else
            echo "::error::Artifact '$ARCHIVE_NAME' not found in release assets"
            echo "Expected: $ARCHIVE_NAME"
            echo "Available assets:"
            echo "$ASSETS" | sed 's/^/  - /'
            exit 1
          fi

      - name: Post summary
        if: always()
        run: |
          echo "## 🎯 FOLIO Release Artifact Creator Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ needs.validate-and-prepare.outputs.release_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.create-artifact.outcome }}" == "success" ]]; then
            echo "### ✅ Artifact Creation Successful" >> $GITHUB_STEP_SUMMARY
            echo "- **Archive**: $(basename ${{ steps.create-artifact.outputs.archive_path }})" >> $GITHUB_STEP_SUMMARY
            echo "- **Size**: $(( ${{ steps.create-artifact.outputs.archive_size }} / 1024 / 1024 ))MB" >> $GITHUB_STEP_SUMMARY
            echo "- **SHA256**: \`${{ steps.create-artifact.outputs.sha256_checksum }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Artifact Creation Failed" >> $GITHUB_STEP_SUMMARY
            echo "Check the job logs for detailed error information." >> $GITHUB_STEP_SUMMARY
            echo "Debug artifacts have been uploaded for analysis." >> $GITHUB_STEP_SUMMARY
          fi

  # Slack notification job - runs after main workflow completes
  notify-slack:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, create-release-artifact]
    if: always() && env.SLACK_NOTIFICATION_CHANNEL != ''
    permissions:
      contents: read
    
    steps:
      - name: Checkout repository
        uses: 'actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11'

      - name: Send notification
        uses: ./.github/actions/slack-notification
        with:
          operation_status: ${{ needs.create-release-artifact.result }}
          operation_type: 'Platform Release Artifact'
          release_tag: ${{ needs.validate-and-prepare.outputs.release_tag }}
          archive_size: ${{ needs.create-release-artifact.outputs.archive_size || '' }}
          sha256_checksum: ${{ needs.create-release-artifact.outputs.sha256_checksum || '' }}
          additional_info: ${{ needs.create-release-artifact.result == 'failure' && 'Check workflow logs for detailed error information and retry the release process.' || '' }}
          workflow_run_id: ${{ github.run_id }}
          slack_channel: ${{ env.SLACK_NOTIFICATION_CHANNEL }}
          slack_token: ${{ secrets.SLACK_BOT_TOKEN }}
