name: Release update (Flow)

on:
#   workflow_call:
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Application name'
        required: true
        type: string
      repo:
        description: 'Application repository name (org/repo format)'
        required: true
        type: string
      release_branch:
        description: 'Release branch to scan (e.g., R1-2025)'
        required: true
        type: string
      update_branch:
        description: 'Update branch name for this release branch'
        required: true
        type: string
      workflow_run_number:
        description: 'GitHub run number for display'
        required: true
        type: string
      dry_run:
        description: 'Perform dry run without creating PRs'
        required: false
        type: boolean
        default: false
      pr_reviewers:
        description: 'Comma-separated list of reviewers (users or teams with org/ prefix)'
        required: false
        type: string
        default: ''
      pr_labels:
        description: 'Comma-separated list of labels to add to PR'
        required: false
        type: string
        default: ''
#     outputs:
#       pr_created:
#         description: 'Whether a PR was created or updated'
#         value: ${{ jobs.manage-pr.outputs.pr_created || jobs.manage-pr.outputs.pr_updated }}
#       pr_number:
#         description: 'PR number if created or updated'
#         value: ${{ jobs.manage-pr.outputs.pr_number }}
#       pr_url:
#         description: 'PR URL if created or updated'
#         value: ${{ jobs.manage-pr.outputs.pr_url }}
#       successful_reviewers:
#         description: 'Successfully added reviewers'
#         value: ${{ jobs.manage-pr.outputs.successful_reviewers }}
#       failed_reviewers:
#         description: 'Failed to add reviewers'
#         value: ${{ jobs.manage-pr.outputs.failed_reviewers }}
#       updated:
#         description: 'Whether the platform descriptor was updated'
#         value: ${{ jobs.update-platform.outputs.updated }}
#       updated_modules:
#         description: 'List of updated Eureka components and applications'
#         value: ${{ jobs.update-platform.outputs.updated_modules }}
#       previous_version:
#         description: 'Previous platform version'
#         value: ${{ jobs.update-platform.outputs.previous_version }}
#       new_version:
#         description: 'New platform version if updated'
#         value: ${{ jobs.update-platform.outputs.new_version }}
#       updates_cnt:
#         description: 'Number of updates'
#         value: ${{ jobs.update-platform.outputs.updates_cnt }}
#       platform_descriptor_file:
#         description: 'Generated platform descriptor file path'
#         value: ${{ jobs.update-platform.outputs.platform_descriptor_file }}
#       platform_descriptor_file_name:
#         description: 'Name of updated platform descriptor file'
#         value: ${{ jobs.update-platform.outputs.platform_descriptor_file_name }}
#       workflow_status:
#         description: 'Overall workflow status'
#         value: ${{ jobs.determine-source-branch.result == 'failure' && 'failure' || (jobs.update-platform.result == 'failure' && 'failure' || (jobs.commit-changes.result == 'failure' && 'failure' || (jobs.manage-pr.result == 'failure' && 'failure' || 'success'))) }}
#       failure_reason:
#         description: 'Reason for workflow failure if any'
#         value: ${{ jobs.determine-source-branch.result == 'failure' && 'Failed to determine source branch' || (jobs.update-platform.result == 'failure' && 'Failed to update application modules' || (jobs.update-platform.result == 'skipped' && 'Update application job was skipped' || (jobs.commit-changes.result == 'failure' && 'Failed to commit changes to branch' || (jobs.manage-pr.result == 'failure' && 'Failed to manage pull request' || '')))) }}

permissions:
  contents: write
  pull-requests: write
  issues: write

# Prevent overlapping runs for the same repo / release branch
concurrency:
  group: release-update-${{ inputs.repo }}-${{ inputs.release_branch }}
  cancel-in-progress: false

# Consistent shell usage & safer defaults
defaults:
  run:
    shell: bash

env:
  APP_NAME: ${{ inputs.app_name }}
  STATE_FILE: platform-descriptor.json
  GH_TOKEN: ${{ github.token }}

jobs:
  determine-source-branch:
    name: Determine Source Branch and PR Status
    runs-on: ubuntu-latest
    outputs:
      source_branch: ${{ steps.determine-branch.outputs.source_branch }}
      update_branch_exists: ${{ steps.determine-branch.outputs.update_branch_exists }}
      pr_exists: ${{ steps.check-pr.outputs.pr_exists }}
      pr_number: ${{ steps.check-pr.outputs.pr_number }}
      pr_url: ${{ steps.check-pr.outputs.pr_url }}
    steps:
      - name: Determine which branch to scan
        id: determine-branch
        env:
          REPO: ${{ inputs.repo }}
          RELEASE_BRANCH: ${{ inputs.release_branch }}
          UPDATE_BRANCH: ${{ inputs.update_branch }}
        run: |
          set -euo pipefail
          echo "::notice::Checking if update branch exists: $UPDATE_BRANCH"

          if gh api "repos/$REPO/branches/$UPDATE_BRANCH" >/dev/null 2>&1; then
            echo "::notice::Update branch exists, will scan: $UPDATE_BRANCH"
            echo "source_branch=$UPDATE_BRANCH" >> "$GITHUB_OUTPUT"
            echo "update_branch_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "::notice::Update branch does not exist, will scan: $RELEASE_BRANCH"
            echo "source_branch=$RELEASE_BRANCH" >> "$GITHUB_OUTPUT"
            echo "update_branch_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Check for existing PR
        id: check-pr
        if: steps.determine-branch.outputs.update_branch_exists == 'true'
        env:
          REPO: ${{ inputs.repo }}
          BASE_BRANCH: ${{ inputs.release_branch }}
          HEAD_BRANCH: ${{ inputs.update_branch }}
        run: |
          set -euo pipefail
          echo "::notice::Checking for existing PR from $HEAD_BRANCH to $BASE_BRANCH"

          pr_json=$(gh pr list \
            --repo "$REPO" \
            --base "$BASE_BRANCH" \
            --head "$HEAD_BRANCH" \
            --json number,url \
            --jq '.[0]' || echo '{}')

          if [ "$pr_json" != "{}" ] && [ -n "$pr_json" ] && [ "$(echo "$pr_json" | jq -r '.url // ""')" != "" ]; then
            pr_number=$(echo "$pr_json" | jq -r '.number // ""')
            pr_url=$(echo "$pr_json" | jq -r '.url // ""')
            echo "::notice::Found existing PR #$pr_number: $pr_url"
            echo "pr_exists=true" >> "$GITHUB_OUTPUT"
            echo "pr_number=$pr_number" >> "$GITHUB_OUTPUT"
            echo "pr_url=$pr_url" >> "$GITHUB_OUTPUT"
          else
            echo "::notice::No existing PR found"
            echo "pr_exists=false" >> "$GITHUB_OUTPUT"
            echo "pr_number=" >> "$GITHUB_OUTPUT"
            echo "pr_url=" >> "$GITHUB_OUTPUT"
          fi

  # Renamed from update-platform to update-platform to align with workflow outputs
  update-platform:
    name: Read & Update Platform Descriptor
    needs: determine-source-branch
    runs-on: ubuntu-latest
    outputs:
      updated: ${{ steps.update-descriptor.outputs.updated }}
      updated_components: ${{ steps.update-descriptor.outputs.updated_eureka_components }}
      updated_applications: ${{ steps.update-descriptor.outputs.updated_applications }}
      updated_modules: ${{ steps.update-descriptor.outputs.updated_modules }}
      previous_version: ${{ steps.update-descriptor.outputs.previous_version }}
      new_version: ${{ steps.update-descriptor.outputs.new_version }}
      updates_cnt: ${{ steps.update-descriptor.outputs.updates_cnt }}
      platform_descriptor_file: ${{ steps.update-descriptor.outputs.platform_descriptor_file }}
      platform_descriptor_file_name: ${{ steps.update-descriptor.outputs.platform_descriptor_file_name }}
      failure_reason: ${{ steps.update-descriptor.outputs.failure_reason }}
    steps:
      - name: Checkout Platform Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ needs.determine-source-branch.outputs.source_branch }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      # gh CLI is pre-installed on ubuntu-latest runners; retained comment for self-hosted scenarios.
      - name: Ensure gh CLI
        # if: runner.os != 'Linux' # adjust as needed for self-hosted matrices
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: Read descriptor file
        id: read-descriptor
        env:
          REPO: ${{ inputs.repo }}
          SOURCE_BRANCH: ${{ needs.determine-source-branch.outputs.source_branch }}
          STATE_FILE: ${{ env.STATE_FILE }}
        run: |
          set -euo pipefail
          echo "::notice::Reading descriptor file from branch: $SOURCE_BRANCH"

          gh api "repos/$REPO/contents/$STATE_FILE?ref=$SOURCE_BRANCH" -H "Accept: application/vnd.github.v3.raw" > "$STATE_FILE"
          if [ ! -s "$STATE_FILE" ]; then
            echo "::error::Descriptor file '$STATE_FILE' is empty or not found in branch '$SOURCE_BRANCH'"
            exit 1
          fi

          if ! jq -e 'has("eureka-components")' "$STATE_FILE" > /dev/null; then
            echo "::error::Descriptor file does not contain 'eureka-components' field"
            echo "File content:" && cat "$STATE_FILE"
            exit 1
          fi
          EUREKA_COMPONENTS=$(jq -c '.["eureka-components"]' "$STATE_FILE")
          {
            echo "eureka_components<<EOF"
            echo "$EUREKA_COMPONENTS"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

          if ! jq -e 'has("applications")' "$STATE_FILE" > /dev/null; then
            echo "::error::Descriptor file does not contain 'applications' field"
            echo "File content:" && cat "$STATE_FILE"
            exit 1
          fi
          APPLICATIONS=$(jq -c '.applications' "$STATE_FILE")
          {
            echo "applications<<EOF"
            echo "$APPLICATIONS"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

          echo "::notice::Successfully extracted eureka-components and applications from descriptor file"

      - name: Update Eureka Components
        id: update-eureka-components
        uses: folio-org/platform-lsp/.github/actions/update-eureka-components@RANCHER-2324
        with:
          components: ${{ steps.read-descriptor.outputs.eureka_components }}

      - name: Update Applications
        id: update-applications
        uses: folio-org/platform-lsp/.github/actions/update-applications@RANCHER-2324
        with:
          applications: ${{ steps.read-descriptor.outputs.applications }}

      - name: Update Descriptor File
        id: update-descriptor
        env:
          UPDATED_EUREKA_COMPONENTS: ${{ steps.update-eureka-components.outputs.updated-components }}
          UPDATED_APPLICATIONS: ${{ steps.update-applications.outputs.updated-applications }}
          UPDATED: false
          FAILURE_REASON: ''
        run: |
          # set -euo pipefail
          set -x
          echo "::notice::Checking for updated eureka components and applications"

          # Extract previous version and set file paths (outputs)
          PREVIOUS_VERSION=$(jq -r '.version // "unknown"' "$STATE_FILE")
          echo "::notice::Current platform version is $PREVIOUS_VERSION"
          {
            echo "previous_version=$PREVIOUS_VERSION"
            echo "platform_descriptor_file=$PWD/$STATE_FILE"
            echo "platform_descriptor_file_name=$STATE_FILE"
          } >> "$GITHUB_OUTPUT"

          CURRENT_EUREKA_COMPONENTS=$(jq -c '.["eureka-components"]' "$STATE_FILE")
          CURRENT_APPLICATIONS=$(jq -c '.applications' "$STATE_FILE")

          # Check if components or applications changed
          if [ "$UPDATED_EUREKA_COMPONENTS" != "$CURRENT_EUREKA_COMPONENTS" ] || [ "$UPDATED_APPLICATIONS" != "$CURRENT_APPLICATIONS" ]; then
            UPDATED=true

            echo "::debug::Eureka components have been updated"

            if [[ "$PREVIOUS_VERSION" =~ ^(R[0-9]+-[0-9]+)\.([0-9]+)$ ]]; then
              BASE_VERSION="${BASH_REMATCH[1]}"
              PATCH_VERSION="${BASH_REMATCH[2]}"
              NEW_VERSION="${BASE_VERSION}.$((PATCH_VERSION + 1))"
            fi


            # Update version and both components and applications in a single jq operation
            jq --arg version "$NEW_VERSION" \
              --argjson components "$UPDATED_EUREKA_COMPONENTS" \
              --argjson applications "$UPDATED_APPLICATIONS" \
              '.version = $version | .["eureka-components"] = $components | .applications = $applications' \
              "$STATE_FILE" > "${STATE_FILE}.tmp" && mv "${STATE_FILE}.tmp" "$STATE_FILE"

            # Log what was updated
            [ "$UPDATED_EUREKA_COMPONENTS" != "$CURRENT_EUREKA_COMPONENTS" ] && echo "::notice::Eureka components have been updated"
            [ "$UPDATED_APPLICATIONS" != "$CURRENT_APPLICATIONS" ] && echo "::notice::Applications have been updated"
             # Output updated components for downstream steps
            {
              echo "updated=$UPDATED"
              echo "new_version=$NEW_VERSION"
              echo "updated_eureka_components=$UPDATED_EUREKA_COMPONENTS"
              echo "updated_applications=$UPDATED_APPLICATIONS"
            } >> "$GITHUB_OUTPUT"
          fi

          if [ "$UPDATED" = true ]; then
            compare_lists() {
              local current="$1" updated="$2"

              jq -n --argjson OLD "$current" --argjson NEW "$updated" '
                def to_map: map({key:.name, value:.version}) | from_entries;
                ($OLD|to_map) as $O | ($NEW|to_map) as $N |
                [ ($O|keys[]) as $k
                  | select(($N|has($k)) and ($O[$k] != $N[$k]))
                  | { name: $k, change: { old: $O[$k], new: $N[$k] } }
                ]
              '
            }

            components=$(compare_lists "$CURRENT_EUREKA_COMPONENTS" "$UPDATED_EUREKA_COMPONENTS")

            required_applications=$(compare_lists \
              "$(jq -c '.required' <<< $CURRENT_APPLICATIONS)" \
              "$(jq -c '.required' <<< $UPDATED_APPLICATIONS)")

            optional_applications=$(compare_lists \
              "$(jq -c '.optional' <<< $CURRENT_APPLICATIONS)" \
              "$(jq -c '.optional' <<< $UPDATED_APPLICATIONS)")

            UPDATED_REPORT="$(jq -n --argjson a "$components" \
              --argjson b "$required_applications" \
              --argjson c "$optional_applications" '$a+$b+$c')"

            UPDATES_CNT=$(jq 'length' <<< "$UPDATED_REPORT")

            {
              echo "updated_report<<EOF"
              echo "$UPDATED_REPORT"
              echo "EOF"
            } >> "$GITHUB_OUTPUT"

            echo "updates_cnt=$UPDATES_CNT" >> "$GITHUB_OUTPUT"
          fi

          # Update step summary if available
          if [[ -n "${GITHUB_STEP_SUMMARY:-}" ]]; then
            {
              echo "## Descriptor File Updates";
              if [ "$UPDATED" = true ]; then
                echo "- **Previous version:** $PREVIOUS_VERSION";
                echo "- **New version:** $NEW_VERSION";
                echo "- **Total updates:** $UPDATES_CNT";
                echo "";
                echo "### Updated Modules:";
                echo '```';
                echo "$UPDATED_REPORT" | jq -r '.[] | "- " + .name + ": " + .change.old + " -> " + .change.new';
                echo '```';
              else
                echo "No updates were necessary for the descriptor file.";
              fi
            } >> "$GITHUB_STEP_SUMMARY"
          fi

          echo "failure_reason=$FAILURE_REASON" >> "$GITHUB_OUTPUT"

          # Debug output print of updated descriptor
          echo "::debug::Updated descriptor file content:"
          ls -al
          cat "$STATE_FILE"

      - name: Fetch updated UI modules list
        id: fetch-updated-ui-modules
        if: steps.update-descriptor.outputs.updated == 'true'
        uses: folio-org/platform-lsp/.github/actions/fetch-updated-ui-modules@RANCHER-2324
        with:
          applications: ${{ steps.update-descriptor.outputs.updated_applications }}
          far-url: 'https://far.ci.folio.org'

      - name: Read package.json content
        id: read-package-json
        if: steps.update-descriptor.outputs.updated == 'true'
        env:
          REPO: ${{ inputs.repo }}
          SOURCE_BRANCH: ${{ needs.determine-source-branch.outputs.source_branch }}
        run: |
          set -euo pipefail
          echo "::notice::Reading package.json from branch: $SOURCE_BRANCH"

          # Read package.json from the repository root
          gh api "repos/$REPO/contents/package.json?ref=$SOURCE_BRANCH" -H "Accept: application/vnd.github.v3.raw" > package.json
          if [ ! -s package.json ]; then
            echo "::error::package.json file is empty or not found in branch '$SOURCE_BRANCH'"
            exit 1
          fi

          # Validate JSON format
          if ! jq empty package.json 2>/dev/null; then
            echo "::error::package.json is not valid JSON"
            cat package.json
            exit 1
          fi

          # Set package.json content as output
          PACKAGE_JSON_CONTENT=$(cat package.json | jq -c .)
          {
            echo "package_json_content<<EOF"
            echo "$PACKAGE_JSON_CONTENT"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

          echo "::notice::Successfully read package.json content"

      - name: Update package.json dependencies
        id: update-package-json
        if: steps.update-descriptor.outputs.updated == 'true' && steps.fetch-updated-ui-modules.outputs.ui-modules != ''
        uses: folio-org/platform-lsp/.github/actions/update-package-json@RANCHER-2324
        with:
          package-json: ${{ steps.read-package-json.outputs.package_json_content }}
          ui-modules: ${{ steps.fetch-updated-ui-modules.outputs.ui-modules }}

      - name: Write updated package.json
        id: write-package-json
        if: steps.update-package-json.outputs.has-updates == 'true'
        run: |
          set -euo pipefail
          echo "::notice::Writing updated package.json content"

          # Write the updated package.json content to file
          echo '${{ steps.update-package-json.outputs.package-json }}' | jq . > package.json

          # Verify the file was written correctly
          if [ ! -s package.json ]; then
            echo "::error::Failed to write updated package.json"
            exit 1
          fi

          echo "::notice::Successfully updated package.json with ${{ steps.update-package-json.outputs.updated-count }} dependency changes"

          # Log updated UI modules to step summary
          if [[ -n "${GITHUB_STEP_SUMMARY:-}" ]]; then
            {
              echo "## Package.json Updates";
              echo "- **Updated dependencies:** ${{ steps.update-package-json.outputs.updated-count }}";
              echo "";
              echo "### Updated UI Modules:";
              echo '```';
              echo '${{ steps.update-package-json.outputs.updated-ui-report }}' | jq -r '.[] | "- " + .name + ": " + .change.old + " -> " + .change.new';
              echo '```';
              if [[ '${{ steps.update-package-json.outputs.not-found-ui-report }}' != '{}' ]]; then
                echo "";
                echo "### UI Modules Not Found in Dependencies:";
                echo '```';
                echo '${{ steps.update-package-json.outputs.not-found-ui-report }}' | jq -r 'to_entries[] | "- " + .key + ": " + .value';
                echo '```';
              fi
            } >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Upload Descriptor Artifact
        if: steps.update-descriptor.outputs.updated == 'true'
        uses: actions/upload-artifact@v4.3.6
        with:
          name: platform-lsp-descriptor-update
          path: |
            ${{ env.STATE_FILE }}
            package.json
          retention-days: 1
  
  commit-changes:
    name: Commit and Push Changes
    needs: [determine-source-branch, update-platform]
    if: needs.update-platform.outputs.updated == 'true'
    uses: folio-org/kitfox-github/.github/workflows/commit-and-push-changes.yml@master
    with:
      repo: ${{ inputs.repo }}
      branch: ${{ inputs.update_branch }}
      artifact_name: platform-lsp-descriptor-update
      commit_message: |
        Update platform to ${{ needs.update-platform.outputs.new_version }}.

        Updated modules:
        ${{ needs.update-platform.outputs.updated_report }}
      dry_run: ${{ inputs.dry_run }}
      use_github_app: true
      source_branch: ${{ needs.determine-source-branch.outputs.source_branch }}
    secrets: inherit

#   manage-pr:
#     name: Manage Pull Request
#     needs: [determine-source-branch, update-application, commit-changes]
#     if: |
#       always() &&
#       !inputs.dry_run &&
#       !cancelled() &&
#       needs.update-application.result == 'success' &&
#       (
#         needs.update-application.outputs.updated == 'true' ||
#         (
#           needs.determine-source-branch.outputs.pr_exists != 'true' &&
#           needs.determine-source-branch.outputs.update_branch_exists == 'true'
#         )
#       )
#     runs-on: ubuntu-latest
#     outputs:
#       pr_created: ${{ steps.create-pr.outputs.pr_created == 'true' }}
#       pr_updated: ${{ steps.update-pr.outputs.pr_updated == 'true' }}
#       pr_number: ${{ steps.create-pr.outputs.pr_number || steps.update-pr.outputs.pr_number || needs.determine-source-branch.outputs.pr_number || '' }}
#       pr_url: ${{ steps.create-pr.outputs.pr_url || steps.update-pr.outputs.pr_url || needs.determine-source-branch.outputs.pr_url || '' }}
#       successful_reviewers: ${{ steps.create-pr.outputs.successful_reviewers || steps.update-pr.outputs.successful_reviewers || '' }}
#       failed_reviewers: ${{ steps.create-pr.outputs.failed_reviewers || steps.update-pr.outputs.failed_reviewers || '' }}
#     steps:
#       - name: Compare Application Versions
#         id: compare
#         uses: folio-org/kitfox-github/.github/actions/compare-state-files@master
#         with:
#           repo: ${{ inputs.repo }}
#           base-source-type: 'branch'
#           base-source: ${{ inputs.release_branch }}
#           head-source-type: 'branch'
#           head-source: ${{ inputs.update_branch }}
#           state-file: 'application-descriptor.json'
#           github-token: ${{ github.token }}
#
#       - name: Generate App Token
#         id: app-token
#         uses: actions/create-github-app-token@v1
#         with:
#           app-id: ${{ vars.EUREKA_CI_APP_ID }}
#           private-key: ${{ secrets.EUREKA_CI_APP_KEY }}
#           owner: ${{ github.repository_owner }}
#           repositories: ${{ inputs.app_name }}
#
#       - name: Create PR if needed
#         id: create-pr
#         if: |
#           needs.determine-source-branch.outputs.pr_exists != 'true' &&
#           (needs.update-application.outputs.updated == 'true' ||
#            needs.determine-source-branch.outputs.update_branch_exists == 'true')
#         uses: folio-org/kitfox-github/.github/actions/create-pr@master
#         with:
#           repo: ${{ inputs.repo }}
#           base_branch: ${{ inputs.release_branch }}
#           head_branch: ${{ inputs.update_branch }}
#           pr_title: "Release: Update to ${{ steps.compare.outputs.new-version || 'No updates' }}"
#           pr_body: |
#             ## Automated Module Updates for Release
#
#             **New Version:** ${{ steps.compare.outputs.new-version || 'No version change' }}
#             **Total modules updated:** ${{ steps.compare.outputs.updates-cnt || '0' }}
#
#             ### Updated Modules:
#             ```
#             ${{ steps.compare.outputs.updated-modules || 'No modules updated' }}
#             ```
#
#             This PR was automatically generated by the release scan workflow.
#           pr_labels: ${{ inputs.pr_labels }}
#           pr_reviewers: ${{ inputs.pr_reviewers }}
#           github_token: ${{ steps.app-token.outputs.token || github.token }}
#
#       - name: Update existing PR if needed
#         id: update-pr
#         if: |
#           needs.determine-source-branch.outputs.pr_exists == 'true' &&
#           needs.update-application.outputs.updated == 'true'
#         uses: folio-org/kitfox-github/.github/actions/update-pr@master
#         with:
#           repo: ${{ inputs.repo }}
#           pr_number: ${{ needs.determine-source-branch.outputs.pr_number }}
#           pr_title: "Release: Update to ${{ steps.compare.outputs.new-version }}"
#           pr_body: |
#             ## Automated Module Updates for Release
#
#             **New Version:** ${{ steps.compare.outputs.new-version }}
#             **Total modules updated:** ${{ steps.compare.outputs.updates-cnt }}
#
#             ### Updated Modules:
#             ```
#             ${{ steps.compare.outputs.updated-modules }}
#             ```
#
#             This PR was automatically generated by the release scan workflow.
#           pr_labels: ${{ inputs.pr_labels }}
#           pr_reviewers: ${{ inputs.pr_reviewers }}
#           github_token: ${{ steps.app-token.outputs.token || github.token }}
