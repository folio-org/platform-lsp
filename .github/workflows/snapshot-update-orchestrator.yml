name: Snapshot update orchestrator

on:
  workflow_dispatch:
    inputs:
      descriptor_build_offset:
        description: 'Offset to apply to application artifact version'
        required: false
        type: string
        default: '100100000000000'
      rely_on_FAR:
        description: 'Whether to rely on FAR for application descriptor dependencies'
        required: false
        type: boolean
        default: false
      dry_run:
        description: 'Perform dry run without making changes'
        required: false
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  validate-actor:
    name: Validate Actor
    runs-on: ubuntu-latest
    outputs:
      authorized: ${{ steps.validate-actor.outputs.authorized }}
    steps:
      - name: Generate App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.EUREKA_CI_APP_ID }}
          private-key: ${{ secrets.EUREKA_CI_APP_KEY }}

      - name: Validate Actor
        id: validate-actor
        uses: folio-org/kitfox-github/.github/actions/validate-team-membership@master
        with:
          username: ${{ github.actor }}
          organization: 'folio-org'
          team: 'kitfox'
          token: ${{ steps.app-token.outputs.token }}

  approve-run:
    name: Approve Run
    needs: validate-actor
    runs-on: ubuntu-latest
    environment: Eureka CI
    if: needs.validate-actor.outputs.authorized == 'false'
    steps:
      - name: Run approvement
        run: |
          echo "::notice::This run was approved by $(
            gh api \
              /repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/approvals \
              --jq \
                '.[] 
                | select(.environments[]?.name == "Eureka CI") 
                | .user.login')"

  get-applications:
    name: Extract Application List
    runs-on: ubuntu-latest
    needs: [ validate-actor, approve-run ]
    if: always() && (needs.validate-actor.outputs.authorized == 'true' || needs.approve-run.result == 'success')
    outputs:
      applications: ${{ steps.extract-applications.outputs.applications }}
      application_count: ${{ steps.extract-applications.outputs.application_count }}
    steps:
      - name: Checkout Platform Repository
        uses: actions/checkout@v4
        with:
          ref: snapshot
          fetch-depth: 0

      - name: Extract Existing Applications
        id: extract-applications
        env:
            FILE: "platform-descriptor.json"
        run: |
          set -eo pipefail

          if [ ! -f "$FILE" ]; then
            echo "::error::$FILE not found in the snapshot branch"
            exit 1
          fi

          existing_apps=$(jq -c '
            [.applications.required[]?, .applications.optional[]?]
            | map(select(.name | startswith("app-")) 
            | .name)
            | sort 
            | unique
          ' "$FILE")
          
          existing_count=$(jq -r 'length' <<<"$existing_apps")
          if ! [[ "$existing_count" -gt 0 ]]; then
            echo "::error::Could not find any applications in $FILE, or the file is malformed."
            exit 1
          fi
          
          echo "::notice::Descriptor verified. $FILE found with $existing_count existing app(s)"
          jq -r '.[]' <<<"$existing_apps" | sed 's/^/  - /'
          
          echo "applications=$existing_apps" >> "$GITHUB_OUTPUT"
          echo "application_count=$existing_count" >> "$GITHUB_OUTPUT"

      - name: Upload Platform Descriptor
        if: ${{ !inputs.rely_on_FAR }}
        uses: actions/upload-artifact@v4
        with:
          name: platform-descriptor
          path: platform-descriptor.json
          retention-days: 1

  update-applications:
    name: Update ${{ matrix.application }}
    needs: get-applications
    if: always() && needs.get-applications.result == 'success'
    strategy:
      matrix:
        application: ${{ fromJson(needs.get-applications.outputs.applications) }}
      fail-fast: false
      max-parallel: 10
    uses: folio-org/kitfox-github/.github/workflows/snapshot-update-flow.yml@master
    with:
      app_name: ${{ matrix.application }}
      repo: folio-org/${{ matrix.application }}
      workflow_run_number: ${{ github.run_number }}
      descriptor_build_offset: ${{ inputs.descriptor_build_offset }}
      rely_on_FAR: ${{ inputs.rely_on_FAR }}
      dry_run: ${{ inputs.dry_run }}
      use_github_app: true
    secrets: inherit

  collect-results:
    name: Collect Application Results
    needs: [get-applications, update-applications]
    runs-on: ubuntu-latest
    if: always() && needs.update-applications.result != 'skipped' && !inputs.dry_run
    outputs:
      failed_apps: ${{ steps.gather-failures.outputs.failed_apps }}
      failed_apps_reason: ${{ steps.gather-failures.outputs.failed_apps_reason }}
      success_count: ${{ steps.gather-failures.outputs.success_count }}
      failure_count: ${{ steps.gather-failures.outputs.failure_count }}
      updated_count: ${{ steps.gather-failures.outputs.updated_count }}
      updated_applications: ${{ steps.gather-failures.outputs.updated_applications }}
    steps:
      - name: Download All Application Results
        uses: actions/download-artifact@v4
        with:
          pattern: "result-*"
          path: /tmp/all-results
          merge-multiple: true

      - name: Gather Application Results
        id: gather-failures
        run: |
          set -eo pipefail
          
          echo "::notice::Analyzing application results"

          all=$(jq -s '.' /tmp/all-results/*.json)

          success_count=$(jq '[.[] | select(.status=="success")] | length' <<<"$all")
          failure_count=$(jq '[.[] | select(.status!="success")] | length' <<<"$all")
          updated_count=$(jq '[.[] | select(.updated==true)] | length' <<<"$all")
          failed_apps=$(jq -r '[.[] | select(.status!="success") | .application] | join(", ")' <<<"$all")
          failed_apps_reason=$(jq -r '
            [.[] | select(.status!="success") | "\(.application): \(.failure_reason // "unknown")"]
            | join("\n")
          ' <<<"$all")
          
          updated_applications=$(jq -r --arg base "${GITHUB_SERVER_URL}" --arg owner "${{ github.repository_owner }}" '
            [.[] 
              | select(.updated==true) 
              | "<\($base)/\($owner)/\(.application)/commit/\(.commit_sha)|\(.application) (\(.updated_cnt))>" 
            ] 
            | join("\n")
          ' <<<"$all")
          
          echo "::notice::Results Summary - Success: $success_count, Failures: $failure_count"
          
          echo "failed_apps=$failed_apps" >> "$GITHUB_OUTPUT"
          echo "success_count=$success_count" >> "$GITHUB_OUTPUT"
          echo "failure_count=$failure_count" >> "$GITHUB_OUTPUT" 
          echo "updated_count=$updated_count" >> "$GITHUB_OUTPUT"
          {
            echo "failed_apps_reason<<EOF"
            printf '%s\n' "$failed_apps_reason"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          {
            echo "updated_applications<<EOF"
            printf '%s\n' "$updated_applications"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

  slack_notification:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [get-applications, update-applications, collect-results]
    if: always() && !cancelled() && needs.collect-results.result == 'success' && !inputs.dry_run
    outputs:
      notification_outcome: ${{ steps.send-success.outcome || steps.send-failure.outcome }}
    env:
      IS_SUCCESS: ${{ needs.update-applications.result == 'success' && 'true' || 'false' }}
    steps:
      - name: Prepare Multiline Strings
        id: prepare-multiline
        env:
          REASONS: "${{ needs.collect-results.outputs.failed_apps_reason }}"
          UPDATED: "${{ needs.collect-results.outputs.updated_applications }}"
        run: |
          set -eo pipefail
          
          echo "::notice::Build fail reasons info string"
          echo "failed_reasons<<EOF"$'\n'"$REASONS"$'\n'EOF >> "$GITHUB_OUTPUT"

          echo "::notice::Build updated applications info string"
          echo "updated_applications<<EOF"$'\n'"$UPDATED"$'\n'EOF >> "$GITHUB_OUTPUT"

      - name: Send SUCCESS Slack Notification
        id: send-success
        if: env.IS_SUCCESS == 'true'
        continue-on-error: true
        uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.postMessage
          token: ${{ secrets.EUREKA_CI_SLACK_BOT_TOKEN }}
          errors: false
          payload: |
            channel: "${{ vars.GENERAL_SLACK_NOTIF_CHANNEL }}"
            text: "Snapshot Applications Update SUCCESS"            
            blocks:
              - type: section
                text:
                  type: mrkdwn
                  text: "*Platform Snapshot Applications Update SUCCESS <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|#${{ github.run_number }}>*"
            attachments:
              - color: "good"
                fields:
                  - title: "Updated Applications"
                    value: "${{ needs.collect-results.outputs.updated_count }}"
                    short: true
                  - title: "Total Applications"
                    value: "${{ needs.collect-results.outputs.success_count }}"
                    short: true
              - color: "good"
                mrkdwn_in: ["fields"]
                text: ${{ toJSON(steps.prepare-multiline.outputs.updated_applications) }}
                footer: "Eureka CI/CD"

      - name: Send FAILED Slack Notification
        id: send-failure
        if: env.IS_SUCCESS == 'false'
        continue-on-error: true
        uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.postMessage
          token: ${{ secrets.EUREKA_CI_SLACK_BOT_TOKEN }}
          errors: false
          payload: |
            channel: "${{ vars.GENERAL_SLACK_NOTIF_CHANNEL }}"
            text: "Snapshot Applications Update FAILED"
            blocks:
              - type: section
                text:
                  type: mrkdwn
                  text: "*Platform Snapshot Applications Update FAILED <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|#${{ github.run_number }}>*"
            attachments:
              - color: "danger"
                fields:
                  - title: "Successfully Processed"
                    value: "${{ needs.collect-results.outputs.success_count }}"
                    short: true
                  - title: "Failed"
                    value: "${{ needs.collect-results.outputs.failure_count }}"
                    short: true
              - color: "danger"
                mrkdwn_in: ["fields"]
                title: "Reasons"
                text: ${{ toJSON(steps.prepare-multiline.outputs.failed_reasons) }}
                footer: "Eureka CI/CD"

  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [get-applications, update-applications, collect-results, slack_notification]
    if: always()
    steps:
      - name: Generate Workflow Summary
        env:
          TOTAL_APPS: ${{ needs.get-applications.outputs.application_count }}
          SUCCESS_COUNT: ${{ needs.collect-results.outputs.success_count || '0' }}
          FAILURE_COUNT: ${{ needs.collect-results.outputs.failure_count || '0' }}
          UPDATED_COUNT: ${{ needs.collect-results.outputs.updated_count || '0' }}
          FAILED_APPS: ${{ needs.collect-results.outputs.failed_apps }}
          FAILED_REASONS: ${{ needs.collect-results.outputs.failed_apps_reason }}
          UPDATED_APPS: ${{ needs.collect-results.outputs.updated_applications }}
          SLACK_NOTIF_OUTCOME: ${{ needs.slack_notification.outputs.notification_outcome }}
          SLACK_NOTIF_STATUS_ICON: >-
            ${{
              needs.slack_notification.outputs.notification_outcome == 'success' && '✅'
              || needs.slack_notification.outputs.notification_outcome == 'failure' && '⚠️'
              || 'ℹ️'
            }}
        run: |
          {
            echo "## 🎯 Platform Snapshot Applications Update Summary"
            echo ""
            echo "### 📊 Overall Statistics"
            echo "- **Total Applications**: $TOTAL_APPS"
            echo "- **Triggered by**: ${{ github.actor }}"
            echo "- **Run Number**: ${{ github.run_number }}"
            echo ""

            # Check if this is a dry run first
            if [[ "${{ inputs.dry_run }}" == "true" ]]; then
              echo "### 🏃 Dry Run Mode"
              echo ""
              echo "This was a dry run to validate the update process."
              echo "- Module updates were checked but not committed"
              echo "- No actual changes were made to any applications"
              echo "- Result statistics are not collected in dry run mode"
              echo ""
              echo "Set \`dry_run=false\` to apply changes and see detailed results."
              echo ""
            elif [[ "${{ needs.update-applications.result }}" == "success" ]]; then
              echo "- **Successfully Processed**: $SUCCESS_COUNT"
              echo "- **Updated Applications**: $UPDATED_COUNT"
              echo "- **Failed Applications**: $FAILURE_COUNT"
              echo ""
              echo "### ✅ All Applications Processed Successfully"
              echo ""

              if [[ "$UPDATED_COUNT" -gt 0 ]]; then
                echo "### 📦 Updated Applications"
                echo ""
                echo "$UPDATED_APPS" | while IFS= read -r line; do
                  if [[ "$line" =~ \<([^|]+)\|([^>]+)\> ]]; then
                    url="${BASH_REMATCH[1]}"
                    text="${BASH_REMATCH[2]}"
                    echo "- [$text]($url)"
                  fi
                done
                echo ""
              else
                echo "### ✨ No Updates Available"
                echo "All applications are already up to date with the latest module versions."
                echo ""
              fi

            elif [[ "${{ needs.update-applications.result }}" == "skipped" ]]; then
              echo "### ⏭️ Update Skipped"
              echo "The update process was skipped. This may be due to:"
              echo "- Authorization check failure"
              echo "- No applications found"
              echo "- Conditional logic"
              echo ""

            else
              echo "- **Successfully Processed**: $SUCCESS_COUNT"
              echo "- **Updated Applications**: $UPDATED_COUNT"
              echo "- **Failed Applications**: $FAILURE_COUNT"
              echo ""
              echo "### ⚠️ Some Applications Failed to Update"
              echo ""

              if [[ "$SUCCESS_COUNT" -gt 0 ]]; then
                echo "#### ✅ Successfully Processed: $SUCCESS_COUNT applications"
                if [[ "$UPDATED_COUNT" -gt 0 ]]; then
                  echo ""
                  echo "**Updated Applications:**"
                  echo "$UPDATED_APPS" | while IFS= read -r line; do
                    if [[ "$line" =~ \<([^|]+)\|([^>]+)\> ]]; then
                      url="${BASH_REMATCH[1]}"
                      text="${BASH_REMATCH[2]}"
                      echo "- [$text]($url)"
                    fi
                  done
                fi
                echo ""
              fi

              if [[ -n "$FAILED_APPS" ]]; then
                echo "#### ❌ Failed Applications: $FAILED_APPS"
                echo ""
                if [[ -n "$FAILED_REASONS" ]]; then
                  echo "**Failure Details:**"
                  echo "\`\`\`"
                  echo "$FAILED_REASONS"
                  echo "\`\`\`"
                  echo ""
                fi
              fi

              echo "### 🔧 Troubleshooting"
              echo "- Check individual application workflow logs for detailed error information"
              echo "- Verify module registry accessibility"
              echo "- Ensure GitHub App has proper permissions for all repositories"
              echo "- Review any authentication or network issues"
              echo ""
            fi

            if [[ "${{ inputs.rely_on_FAR }}" == "true" ]]; then
              echo "### 📚 FAR Mode"
              echo "Applications were validated against FOLIO Application Registry (FAR) dependencies."
              echo ""
            fi

            echo "### 🔄 Workflow Options Used"
            echo "- **Descriptor Build Offset:** ${{ inputs.descriptor_build_offset }}"
            echo "- **Rely on FAR:** ${{ inputs.rely_on_FAR }}"
            echo "- **Dry Run:** ${{ inputs.dry_run }}"
            echo "- **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"

            echo ""
            echo "### 📨 Notification Status"
            echo ""

            if [[ "${{ inputs.dry_run }}" == "true" ]]; then
              echo "ℹ️ **Slack Notification:** Skipped (dry run mode)"
            elif [[ -n "${{ vars.GENERAL_SLACK_NOTIF_CHANNEL }}" ]]; then
              if [[ "$SLACK_NOTIF_OUTCOME" == "success" ]]; then
                echo "$SLACK_NOTIF_STATUS_ICON **Slack Channel** (\`${{ vars.GENERAL_SLACK_NOTIF_CHANNEL }}\`): Notification sent successfully"
              elif [[ "$SLACK_NOTIF_OUTCOME" == "failure" ]]; then
                echo "$SLACK_NOTIF_STATUS_ICON **Slack Channel** (\`${{ vars.GENERAL_SLACK_NOTIF_CHANNEL }}\`): Failed to send notification"
              elif [[ "$SLACK_NOTIF_OUTCOME" == "skipped" ]]; then
                echo "$SLACK_NOTIF_STATUS_ICON **Slack Channel** (\`${{ vars.GENERAL_SLACK_NOTIF_CHANNEL }}\`): Notification skipped"
              else
                echo "ℹ️ **Slack Channel** (\`${{ vars.GENERAL_SLACK_NOTIF_CHANNEL }}\`): No notification sent"
              fi
            else
              echo "ℹ️ **Slack Notification:** Channel not configured"
            fi

            echo ""
            echo "---"
            echo "*Generated by ${{ github.workflow }} at $(date -u +'%Y-%m-%d %H:%M:%S UTC')*"
          } >> $GITHUB_STEP_SUMMARY
