name: 'FOLIO Release Artifact Creator'
description: 'Automatically packages and uploads complete platform release artifacts'
author: 'FOLIO'

inputs:
  release_tag:
    description: 'Release tag to create artifacts for'
    required: true
  github_token:
    description: 'GitHub token for uploading artifacts'
    required: true
  config_path:
    description: 'Path to release configuration file'
    required: false
    default: '.github/release-config.yml'
  descriptor_path:
    description: 'Path to platform descriptor file'
    required: false
    default: 'platform-descriptor.json'
  far_url:
    description: 'Base URL for FAR API'
    required: false
    default: 'https://far.ci.folio.org'

outputs:
  archive_path:
    description: 'Path to the created archive'
    value: ${{ steps.create-archive.outputs.archive_path }}
  archive_size:
    description: 'Size of the created archive in bytes'
    value: ${{ steps.create-archive.outputs.archive_size }}
  sha256_checksum:
    description: 'SHA256 checksum of the archive'
    value: ${{ steps.create-archive.outputs.sha256_checksum }}

runs:
  using: 'composite'
  steps:
    - name: Install dependencies
      shell: bash
      run: |
        echo "::group::Installing dependencies"
        # Ensure required tools are available
        which python3 || (echo "::error::Python3 is required but not installed" && exit 1)
        # Install jq if not present
        if ! which jq > /dev/null 2>&1; then
          echo "jq not found, installing..."
          sudo apt-get update && sudo apt-get install -y jq
        fi
        # Install yq if not present
        if ! which yq > /dev/null 2>&1; then
          echo "yq not found, installing..."
          sudo wget -O /usr/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/bin/yq
        fi
        which jq || (echo "::error::jq is required but could not be installed" && exit 1)
        which yq || (echo "::error::yq is required but could not be installed" && exit 1)
        which tar || (echo "::error::tar is required but not installed" && exit 1)

        # Install Python dependencies if requirements file exists
        if [[ -f "${{ github.action_path }}/requirements.txt" ]]; then
          python3 -m pip install --user -r "${{ github.action_path }}/requirements.txt"
        fi
        echo "::endgroup::"

    - name: Validate required files
      shell: bash
      run: |
        echo "::group::Validating required files"
        set -euo pipefail

        # Make scripts executable
        chmod +x "${{ github.action_path }}/validate-files.sh"
        chmod +x "${{ github.action_path }}/collect-files.sh"
        chmod +x "${{ github.action_path }}/create-archive.sh"

        # Run validation with error handling
        if ! "${{ github.action_path }}/validate-files.sh" "${{ inputs.config_path }}"; then
          echo "::error::File validation failed"
          exit 1
        fi
        echo "::endgroup::"

    - name: Collect application descriptors
      shell: bash
      run: |
        echo "::group::Collecting application descriptors from FAR"
        if python3 "${{ github.action_path }}/collect_descriptors.py" \
          "${{ inputs.descriptor_path }}" \
          "${{ inputs.far_url }}"; then
          echo "âœ… Successfully collected descriptors"
        else
          echo "::error::Failed to collect descriptors"
          exit 1
        fi
        echo "::endgroup::"

    - name: Collect platform files
      shell: bash
      run: |
        echo "::group::Collecting platform files"
        set -euo pipefail

        if ! "${{ github.action_path }}/collect-files.sh" "${{ inputs.config_path }}"; then
          echo "::error::Failed to collect platform files"
          exit 1
        fi
        echo "::endgroup::"

    - name: Create archive
      id: create-archive
      shell: bash
      run: |
        echo "::group::Creating release archive"
        set -euo pipefail

        if ! "${{ github.action_path }}/create-archive.sh" \
          "${{ inputs.release_tag }}" \
          "${{ inputs.config_path }}"; then
          echo "::error::Failed to create release archive"
          exit 1
        fi
        echo "::endgroup::"
